import{_ as n,c as s,o as a,a as t}from"./app-BiyYV_xq.js";const p={},e=t(`<h1 id="slf4j与logback实用指南-基于gradle" tabindex="-1"><a class="header-anchor" href="#slf4j与logback实用指南-基于gradle"><span>Slf4j与Logback实用指南(基于Gradle)</span></a></h1><h2 id="_1-引盐" tabindex="-1"><a class="header-anchor" href="#_1-引盐"><span>1. 引盐</span></a></h2><p>在当今软件开发领域，日志记录是一项至关重要的任务，它不仅帮助开发人员跟踪应用程序的运行状态和行为，还有助于故障排查、性能优化和安全监控。在日志记录领域，slf4j（Simple Logging Facade for Java）和logback是两个备受推崇的工具，它们为 Java 应用程序提供了强大而灵活的日志记录功能。</p><p>slf4j作为一个简单的日志门面，提供了统一的日志记录接口，使开发人员能够轻松切换不同的日志实现框架，而无需修改应用程序的代码。而logback则是slf4j的一个实现，它提供了高性能、灵活性强的日志框架，可以满足各种日志记录需求。</p><p>本文将深入探讨slf4j和logback日志框架的核心概念、使用方法、最佳实践以及高级技巧。我们将介绍如何配置日志记录器、如何使用标记（Markers）来区分日志消息、如何进行日志级别的动态调整以及如何利用logback的各种功能来优化日志记录体验。</p><p>通过本文的阐述，读者将能够更好地理解和利用slf4j与logback这两个强大的日志记录工具，从而提升应用程序的日志记录质量、效率和可维护性。让我们一起深入探索日志记录的世界，掌握slf4j与logback的精髓，为我们的软件开发之路增添一份技术的光彩。</p><p>先简单看一下本文的大纲：</p><p><img src="https://images.waer.ltd/notes/image-20240424222613795.png" alt="image-20240424222613795"></p><hr><h2 id="_2-slf4j框架" tabindex="-1"><a class="header-anchor" href="#_2-slf4j框架"><span>2. SLF4J框架</span></a></h2><p><code>SLF4J</code>（<strong>Simple Logging Facade for Java</strong>）是一个为 Java 应用程序提供日志功能的简单日志门面框架。它的设计目的是通过提供一个统一的日志接口，使得应用程序能够在不同的日志实现（如<code>Logback</code>、<code>Log4j</code>、<code>java.util.logging</code>等）之间进行切换，而无需修改应用程序的代码。</p><p>看重点，他是一个统一接口的实现规范，而不是具体的实现提供者，基于此，很多具体的日志实现工具都可以在在这个条件下进行自己的实现，最常用的有<code>Logback、Log4j</code>。</p><p><img src="https://images.waer.ltd/notes/image-20240424170420302.png" alt="image-20240424170420302"></p><p>使用<code>slf4j</code>的几点理由:</p><ol><li>灵活性高：<code>SLF4J </code>提供了一个统一的日志门面，使得应用程序可以轻松地切换和配置不同的日志实现框架，而无需修改应用程序的代码。</li><li>丰富的可选实现: 他提供与所有流行的日志框架的支持，如上面的提到的<code>log4j,logback</code>等等，可以在其中根据需求无缝切换；</li><li>由于 <code>SLF4J </code>将应用程序和日志框架解耦，因此可以轻松地编写独立于日志框架的应用程序。无需为用于编写应用程序的日志记录框架而烦恼。</li><li><code>SLF4J </code>支持参数化日志记录消息，且不受限于你使用哪一种具体实现；</li></ol><hr><h3 id="_2-1-基本组件" tabindex="-1"><a class="header-anchor" href="#_2-1-基本组件"><span>2.1 基本组件</span></a></h3><p><img src="https://images.waer.ltd/notes/image-20240424171738737.png" alt="image-20240424171738737"></p><p>一款日志记录框架一般由以下三种解构构成：</p><ul><li>记录 <ul><li>用于捕获数据和记录消息</li></ul></li><li>格式化 <ul><li>可以讲记录的消息也就是我们所谓的日志信息进行格式化，规范输出；</li></ul></li><li>处理方式 <ul><li>将日志信息通过控制台、文件、数据库等载体进行输出处理；</li></ul></li></ul><hr><h3 id="_2-2-日志级别" tabindex="-1"><a class="header-anchor" href="#_2-2-日志级别"><span>2.2 日志级别</span></a></h3><p>根据日志消息的重要程度，或者说对项目影响程度的不同，日志一般有不同的级别:</p><p><img src="https://images.waer.ltd/notes/image-20240424172222270.png" alt="image-20240424172222270"></p><ul><li><strong>TRACE：</strong> <strong>最低级别的日志</strong>，通常用于记录程序执行过程中的详细信息，如方法调用、变量值等。<code>TRACE </code>级别的日志对于排查问题和调试非常有用，但<strong>通常不会在生产环境中启用，因为会产生大量输出</strong>。</li><li><strong>DEBUG：</strong> 用于<strong>记录调试信息</strong>。<code>DEBUG </code>级别的日志通常用于记录程序执行过程中的详细信息，但相<strong>比 TRACE 级别更加精简</strong>。在<strong>开发和测试阶段</strong>启用 <code>DEBUG </code>日志有助于定位问题和调试代码。</li><li><strong>INFO：</strong> 用于记录程序<strong>运行时的重要信息</strong>。<code>INFO </code>级别的日志通常用于记录程序的运行状态、重要事件等，可以帮助了解程序的运行情况，但不会产生过多的输出。</li><li><strong>WARN：</strong> 用于<strong>记录警告信息</strong>。<code>WARN </code>级别的日志通常表示一些<strong>潜在的问题或异常情况</strong>，虽然不会导致程序出错，但可能需要注意或处理。</li><li><strong>ERROR：</strong> 用于<strong>记录错误信息</strong>。<code>ERROR </code>级别的日志表示程序发生了<strong>错误或异常情况</strong>，需要引起关注并可能需要进行处理或修复。</li><li><strong>FATAL：</strong> <strong>最高级别的日志，用于记录严重错误</strong>。<code>FATAL </code>级别的日志表示程序遇到了无法恢复的严重错误，<strong>可能会导致程序崩溃或无法继续运行。</strong></li></ul><blockquote><p>虽然这里列出了6中级别，但日常使用过程中<code>fatal</code>和<code>trace</code>用的不是很多。</p></blockquote><hr><h3 id="_2-3-slf4j基本使用" tabindex="-1"><a class="header-anchor" href="#_2-3-slf4j基本使用"><span>2.3 Slf4J基本使用</span></a></h3><blockquote><p>演示项目基于：</p><ul><li><code>SpringBoot 3.2.10</code></li><li><code>Gradle:8.7</code></li><li><code>JDK 17</code></li></ul></blockquote><ul><li>添加依赖</li></ul><div class="language-groovy line-numbers-mode" data-highlighter="prismjs" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code><span class="line"><span class="token comment">// https://mvnrepository.com/artifact/org.slf4j/slf4j-api</span></span>
<span class="line">implementation <span class="token string">&#39;org.slf4j:slf4j-api:2.0.13&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以通过<code>slf4j</code>提供的工厂方法创建一个简单日志对象,导包的时候注意看是<code>import org.slf4j.Logger;</code>，因为还有一个同名的<code>Logger</code>来自<code>java.util*</code>包下，注意区分。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">&quot;SampleLogger&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><ol><li><p><strong><code>Logger </code>接口：</strong></p><ul><li><code>Logger</code> 是 <code>SLF4J </code>框架中定义的一个接口，用于记录日志消息。通过 Logger 接口，可以使用不同的日志级别（如 INFO、DEBUG、ERROR 等）记录日志消息。</li></ul></li><li><p><strong><code>LoggerFactory </code>类：</strong></p><ul><li><code>LoggerFactory</code> 是 <code>SLF4J </code>框架中的一个工厂类，用于获取 <code>Logger </code>实例。开发人员可以使用 <code>LoggerFactory </code>类的静态方法 <code>getLogger()</code> 来获取一个特定名称的 Logger 实例。</li></ul></li><li><p><strong>&quot;<code>SampleLogger</code>&quot; 参数：</strong></p><ul><li>在 <code>getLogger()</code> 方法中传入的参数是一个字符串，用于指定要获取的 <code>Logger </code>实例的名称。通常，这个名称可以是类名、包名或者任何描述性的字符串。</li></ul></li></ol></blockquote><p>通过这个方法，我们获得了一个<code>Logger</code>实例，通过源码可知，他包含了上面提到的几种日志级别的各种常用方法：</p><p><img src="https://images.waer.ltd/notes/image-20240424180736466.png" alt="image-20240424180736466"></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 创建日志Logger对象</span></span>
<span class="line">     <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">&quot;SampleLogger&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">     <span class="token comment">// 几种日志级别方法的级别使用</span></span>
<span class="line">    logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;这条日志来自[trace]级别...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;这条日志来自[debug]级别...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;这条日志来自[info]级别...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;这条日志来自[warn]级别...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;这条日志来自[error]级别...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行上面的代码</p><p><img src="https://images.waer.ltd/notes/image-20240424181420177.png" alt="image-20240424181420177"></p><p>从控制台来看，这里少打印了<code>debug</code>和<code>trace</code>级别的内容，这是因为<code>SLF4J </code>和 <code>Logback </code>默认的日志级别是 INFO，这意味着只有 INFO 级别及以上的日志会被输出到控制台。代码中使用了 INFO、WARN 和 ERROR 三种日志级别，因此只有这三种级别的日志会被输出，而 TRACE 和 DEBUG 级别的日志不会显示在控制台上。</p><p>也可以使用占位符的形式进行日志的打印，这也是比较常用的：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"> <span class="token comment">// 使用占位符的形式</span></span>
<span class="line">    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;这是占位符的数据&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除此之外，我们还可以通过使用类名获取实例化<code>Logger</code>实例的方式：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogMain</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> <span class="token constant">LOGGER</span>  <span class="token operator">=</span><span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">LogMain</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">         <span class="token comment">// 几种日志级别方法的级别使用</span></span>
<span class="line">        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;这条日志来自[info]级别...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;这条日志来自[warn]级别...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;这条日志来自[error]级别...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 使用占位符的形式</span></span>
<span class="line">        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;这是占位符的数据&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是两种方式的简单对比:</p><ol><li><p><strong>使用类名获取 Logger 实例</strong>：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> <span class="token constant">LOGGER</span> <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">LogMain</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这种方式是通过类名 <code>LogMain.class</code> 来获取 Logger 实例，这样可以确保每个类都有自己的 Logger 实例，并且可以更容易地追踪日志信息的来源。这种方式在实践中是比较常见的，特别是在类的静态方法中使用。</p></li><li><p><strong>使用自定义名称获取 Logger 实例</strong>：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">&quot;SampleLogger&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这种方式是通过自定义的名称 &quot;<code>SampleLogger</code>&quot; 来获取 Logger 实例。使用自定义名称可以将多个类的日志信息归类到同一个 Logger 实例中，从而方便对日志信息进行管理和过滤。这种方式适用于需要对多个类的日志进行统一管理的情况。</p></li></ol><p>两种方式都可以获取 Logger 实例，选择哪种方式取决于具体的需求和场景。如果你想要每个类有自己的 Logger 实例并且更容易追踪日志来源，可以使用类名获取；如果需要对多个类的日志进行统一管理，可以使用自定义名称获取。</p><hr><h2 id="_3-logback" tabindex="-1"><a class="header-anchor" href="#_3-logback"><span>3. Logback</span></a></h2><h3 id="_3-1-导入依赖" tabindex="-1"><a class="header-anchor" href="#_3-1-导入依赖"><span>3.1 导入依赖</span></a></h3><p>在上面的内容中，简单体验了一些<code>slf4j</code>框架的基本使用流程以及常用的方法，在日常的调试开发中，对于控制台输出信息来说，确实也够用了，但就实际的项目需求来讲还是差点意思，所以本章节还是介绍一下他的一款具体实现，那就是<code>logback</code>；</p><p><strong>导入依赖：</strong> 我们需要导入下面两个依赖，当然前面导入的<code>slf4j</code>的核心依赖还是要的，什么意思，咱不说，你品，你细品(😎)！！！！</p><div class="language-groovy line-numbers-mode" data-highlighter="prismjs" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code><span class="line"><span class="token comment">// https://mvnrepository.com/artifact/ch.qos.logback/logback-core</span></span>
<span class="line">implementation <span class="token string">&#39;ch.qos.logback:logback-core:1.5.6&#39;</span></span>
<span class="line"><span class="token comment">// https://mvnrepository.com/artifact/ch.qos.logback/logback-classic</span></span>
<span class="line">implementation <span class="token string">&#39;ch.qos.logback:logback-classic:1.5.6&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>欧克，依赖导入之后别忘了刷新一下，完成构建再继续。</p><p>依赖加载完成后，还是基于之前的代码，我们什么也不做配置，看看日志的打印有什么区别：</p><p><img src="https://images.waer.ltd/notes/image-20240424191527626.png" alt="image-20240424191527626"></p><blockquote><p>测试结果主打一个一成不变！！</p></blockquote><hr><h3 id="_3-2-配置logback" tabindex="-1"><a class="header-anchor" href="#_3-2-配置logback"><span>3.2 配置logback</span></a></h3><p>要配置 <code>Logback</code>，我们可以使用 <code>XML </code>文件以及 <code>Groovy </code>文件。这里将使用 XML 方法。在项目的 <code>resources </code>文件夹中创建 <code>logback.xml</code> 文件，其中包含 以下内容并给出详细的注释以及解释，兄台不必多言！</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token comment">&lt;!-- 配置一个名为 &quot;STDOUT&quot; 的 appender，使用 AsyncAppender 异步输出日志 --&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>STDOUT<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ch.qos.logback.classic.AsyncAppender<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token comment">&lt;!-- 配置日志输出的格式 --&gt;</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token comment">&lt;!-- 指定日志输出的格式，包括时间、日志级别、logger 名称、日志消息 --&gt;</span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>%d{HH:mm.SSS} %-5level %logger{36} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">&lt;!-- 配置根日志级别为 INFO --&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>info<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token comment">&lt;!-- 将名为 &quot;STDOUT&quot; 的 appender 引用到根日志中 --&gt;</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>STDOUT<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><ul><li><code>&lt;appender&gt;</code> 元素用于配置日志输出的目标，这里配置了一个名为 &quot;<code>STDOUT</code>&quot; 的 <code>appender</code>，使用 <code>AsyncAppender</code> 异步输出日志。</li><li><code>&lt;encoder&gt;</code> 元素用于配置日志输出的格式，这里指定了输出格式的模式，包括时间 <code>%d{HH:mm.SSS}</code>、日志级别 <code>%-5level</code>、logger 名称 <code>%logger{36}</code>、日志消息 <code>%msg</code> 等。</li><li><code>&lt;pattern&gt;</code> 元素定义了日志输出的格式模式，<code>%d{HH:mm.SSS}</code> 表示输出时间，<code>%-5level</code> 表示输出日志级别（左对齐，最多占5个字符），<code>%logger{36}</code> 表示输出 logger 名称（最多36个字符），<code>%msg</code> 表示输出日志消息，<code>%n</code> 表示换行。</li><li><code>&lt;root&gt;</code> 元素定义了根日志的配置，这里将根日志级别设置为 <code>INFO</code>。</li><li><code>&lt;appender-ref&gt;</code> 元素用于将指定的 appender 引用到根日志中，这里将名为 &quot;<code>STDOUT</code>&quot; 的 <code>appender </code>引用到根日志中，表示使用这个 <code>appender</code> 输出根日志的日志信息。</li></ul></blockquote><h4 id="_3-2-1-logback-appender" tabindex="-1"><a class="header-anchor" href="#_3-2-1-logback-appender"><span>3.2.1 <strong>Logback appender</strong></span></a></h4><p><code>Logback appender</code> 是 <code>Logback </code>用于写入日志事件的组件。<code>Logback</code>提供了多种类型的<code>Appenders</code>，每种<code>Appender</code>都有不同的功能和用途,下面列一些常见的吧</p><blockquote><ol><li><strong>ConsoleAppender</strong>：将日志消息输出到控制台。</li><li><strong>FileAppender</strong>：将日志消息输出到文件。</li><li><strong>RollingFileAppender</strong>：将日志消息输出到文件，并支持日志文件的滚动（即按照一定条件切分日志文件，如按日期、文件大小等）。</li><li><strong>SMTPAppender</strong>：通过邮件发送日志消息。</li><li><strong>SocketAppender</strong>：将日志消息通过网络发送到远程服务器。</li><li><strong>DBAppender</strong>：将日志消息写入数据库。</li><li><strong>AsyncAppender</strong>：异步地将日志消息输出到其他<code>Appender</code>，可以提高日志系统的性能。</li><li><strong>SyslogAppender</strong>：将日志消息发送到<code>Syslog</code>服务器。</li></ol></blockquote><h4 id="_3-2-2-logback-classic" tabindex="-1"><a class="header-anchor" href="#_3-2-2-logback-classic"><span>3.2.2 <strong>logback-classic</strong></span></a></h4><p>在本章节的开始，我们还引如了这个<code>logback-classic</code>的依赖，这是<code>Logback</code>框架中的一个模块，它提供了一个功能强大且灵活的日志系统，可以用于Java应用程序中进行日志记录。一些<code>logback-classic</code>模块中的重要组件包括：</p><blockquote><ol><li><strong>Logger（日志记录器）</strong>：Logger用于记录日志消息。在<code>Logback</code>中，<code>Logger</code>是最核心的组件之一，负责生成和处理日志消息。</li><li><strong>Appender（输出目的地）</strong>：Appender用于定义日志消息的输出目的地，比如控制台、文件、数据库等。<code>logback-classic</code>提供了多种类型的Appenders来满足不同的输出需求。</li><li><strong>Layout（日志格式化）</strong>：Layout用于定义日志消息的格式，包括日志消息的时间戳、日志级别、日志内容等。通过Layout，可以自定义日志消息的输出格式。</li><li><strong>Level（日志级别）</strong>：Level用于定义日志消息的级别，如<code>DEBUG、INFO、WARN、ERROR</code>等。可以通过Level来控制日志消息的输出级别。</li><li><strong>配置文件</strong>：<code>logback-classic</code>使用XML或Groovy等格式的配置文件来配置日志系统的行为，包括配置日志级别、<code>Appenders、Layou</code>t等。</li></ol></blockquote><p>由于<code>logback</code>提供的功能实在很多，这里也不可能一一列举，下面就以将日志信息写入控制台和文件为例，也就是<code>RollingFileAppender</code>;</p><ul><li>代码还是这点内容</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogMain</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> <span class="token constant">LOGGER</span>  <span class="token operator">=</span><span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">LogMain</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;这是一条INFO级别的日志....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;这是一条ERROR级别的日志...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>配置文件就有些变化了</li></ul><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token comment">&lt;!-- 配置一个名为 &quot;STDOUT&quot; 的 appender，使用 AsyncAppender 异步输出日志 --&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>STDOUT<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ch.qos.logback.classic.AsyncAppender<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token comment">&lt;!-- 配置目标 Appender 为 ConsoleAppender，即输出到控制台 --&gt;</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>CONSOLE<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token comment">&lt;!-- 指定日志输出的格式，包括时间、日志级别、logger 名称、日志消息 --&gt;</span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>%d{HH:mm.SSS} %-5level %logger{36} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">&lt;!-- 定义一个名为 &quot;CONSOLE&quot; 的 ConsoleAppender，用于将日志消息输出到控制台 --&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>CONSOLE<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">&lt;!-- 定义一个名为 &quot;file&quot; 的 FileAppender，用于将日志消息输出到文件 --&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ch.qos.logback.core.FileAppender<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token comment">&lt;!-- 指定日志文件的路径 --&gt;</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">&gt;</span></span>src/main/resources/mylogs.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token comment">&lt;!-- 如果为 true，则日志消息将追加到文件末尾；如果为 false，则会覆盖已有的文件内容 --&gt;</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>append</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>append</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token comment">&lt;!-- 如果为 true，则每次写入日志消息后会立即刷新输出流；如果为 false，则可能会缓冲一段时间后再刷新 --&gt;</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>immediateFlush</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>immediateFlush</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token comment">&lt;!-- 配置日志消息的输出格式，包括时间戳、线程名、日志级别、Logger名称、日志消息内容等 --&gt;</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">&lt;!-- 定义一个名为 &quot;cn.ilikexff.springsecuritydemo2.controller.LogMain&quot; 的 Logger --&gt;</span></span>
<span class="line">    <span class="token comment">&lt;!-- 注意这里要正确指定你的日志信息的来源路径 --&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.ilikexff.springsecuritydemo2.controller.LogMain<span class="token punctuation">&quot;</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>INFO<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token comment">&lt;!-- 将 Logger 与名为 &quot;STDOUT&quot; 的 Appender 关联 --&gt;</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>STDOUT<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">&lt;!-- 配置根 Logger 的行为 --&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>info<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token comment">&lt;!-- 将根 Logger 与名为 &quot;file&quot; 的 Appender 关联，表示根 Logger 的日志消息将输出到文件 --&gt;</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行程序之后发现在指定的日志文件和控制台都打印了相关的日志信息:</p><p><img src="https://images.waer.ltd/notes/image-20240424202540003.png" alt="image-20240424202540003"></p><hr><h4 id="_3-2-3-rollingfileappender" tabindex="-1"><a class="header-anchor" href="#_3-2-3-rollingfileappender"><span>3.2.3 RollingFileAppender</span></a></h4><p><code>RollingFileAppender</code>是<code>Logback</code>框架中的一个<code>Appender</code>，用于将日志输出到文件，并支持日志文件的滚动（<code>rolling</code>）功能。其作用包括：</p><ol><li><p><strong>日志文件滚动</strong>：<code>RollingFileAppender</code>可以配置日志文件的滚动策略，例如按文件大小滚动、按时间滚动等。这样可以限制单个日志文件的大小，避免日志文件过大影响系统性能，同时保留一定数量的历史日志文件，方便查看和管理。</p></li><li><p><strong>日志文件管理</strong>：<code>RollingFileAppender</code>可以管理日志文件的写入和切换，确保日志信息被正确记录到文件中。它可以自动创建新的日志文件、关闭旧的日志文件，并根据配置进行日志文件的滚动和清理。</p></li><li><p><strong>配置灵活</strong>：<code>RollingFileAppender</code>提供了丰富的配置选项，可以根据需求定制日志文件的滚动策略、文件命名规则、文件大小限制等参数，以满足不同场景下的日志记录需求。</p></li></ol><p>考虑下面的配置:</p><blockquote><p>该配置将日志文件限制在单个文件最大10MB，保留30个历史日志文件，并限制所有历史日志文件总大小不超过1GB。</p></blockquote><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">&lt;!-- 定义控制台输出的Appender --&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>STDOUT<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">&lt;!-- 定义RollingFileAppender，将日志输出到文件中，并支持日志文件的滚动 --&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>FILE<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">&gt;</span></span>logs/mylog.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 日志文件的路径和名称 --&gt;</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">&lt;!-- 配置日志文件的滚动策略 --&gt;</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">&gt;</span></span>logs/mylog-%d{yyyy-MM-dd}.%i.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 日志文件的命名规则 --&gt;</span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">&gt;</span></span>2MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 单个日志文件的最大大小 --&gt;</span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">&gt;</span></span>7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 保留的历史日志文件数量 --&gt;</span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>totalSizeCap</span><span class="token punctuation">&gt;</span></span>1GB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>totalSizeCap</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 所有历史日志文件的总大小上限 --&gt;</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">&lt;!-- 配置Logger，指定日志记录级别和Appender --&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.ilikexff.springsecuritydemo2.controller.LogMain<span class="token punctuation">&quot;</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>INFO<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>STDOUT<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- 将日志输出到控制台 --&gt;</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>FILE<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- 将日志输出到文件中 --&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">&lt;!-- 配置根Logger，指定日志记录级别和Appender --&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>INFO<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>STDOUT<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- 将日志输出到控制台 --&gt;</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>FILE<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- 将日志输出到文件中 --&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据上面的配置，我们简单测试以下配置是否生效，比如多执行几次程序，不断的输出日志，看看单个文件最大大小达到<code>2M</code>时会怎样。</p><p><img src="https://images.waer.ltd/notes/image-20240424205922590.png" alt="image-20240424205922590"></p><p>截至上图<code>mylog.log</code>的大小为<code>2KB</code>,为了加快测试，简单修改代码如下:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogMain</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> <span class="token constant">LOGGER</span>  <span class="token operator">=</span><span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">LogMain</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;这是一条INFO级别的日志....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;这是一条ERROR级别的日志...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不断测试之后发现当我们的原日志文件大小超过<code>2M</code>时，就发生了滚动，将原日志信息放到了一个新的日志文件中，并且这个文件的命名也是按照配置文件指定的规则创建的，成功发生了滚动，说明配置是生效了的。</p><p><img src="https://images.waer.ltd/notes/image-20240424211105513.png" alt="image-20240424211105513"></p><p><img src="https://images.waer.ltd/notes/image-20240424210815077.png" alt="image-20240424210815077"></p><p>关于<code>RollingFileAppender</code>就到这了，建议自己动手修改配置多操作几次，加深印象和理解，下面提一嘴<code>Logback</code>编码器；</p><hr><h4 id="_3-2-4-logback-encoders" tabindex="-1"><a class="header-anchor" href="#_3-2-4-logback-encoders"><span>3.2.4 Logback Encoders</span></a></h4><p>这玩意有什么用呢，不妨通过名称大胆猜测，这是用来作日志格式转换的模块。没错，<code>Encoder</code>用于将日志事件转换为特定格式的文本，以便输出到目标<code>Appender</code>。<code>Encoder</code>负责将日志事件转换为字符串形式，以便日志系统能够将其输出到适当的目标，比如控制台、文件或者其他地方。</p><p>Logback提供了多种Encoder，常见的有：</p><blockquote><ol><li><strong>PatternLayoutEncoder</strong>：通过指定的模式（pattern）将日志事件格式化为文本。可以自定义日志输出的格式，包括日期、日志级别、线程名等信息。</li><li><strong>JsonEncoder</strong>：将日志事件输出为<code>JSON</code>格式的字符串，适用于结构化日志。</li><li><strong>EchoEncoder</strong>：将日志事件输出到控制台，类似于System.out.println()。</li><li><strong>RawFileAppender</strong>：将日志事件以原始格式输出到文件，不进行任何格式化。</li></ol></blockquote><p>但是大部分情况下，我们其实不太需要修改这个配置，最常用的就是上面配置中写的格式：</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>console<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>%d{HH:mm:ss.SSS} %-5level %logger{36} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>outputPatternAsHeader</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>outputPatternAsHeader</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>info<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>console<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="_3-2-5-logback-filters" tabindex="-1"><a class="header-anchor" href="#_3-2-5-logback-filters"><span>3.2.5 Logback Filters</span></a></h4><p>在<code>Logback</code>中，Filters（过滤器）用于过滤日志事件，只有符合特定条件的日志事件才会被处理和记录。Filters可以帮助您控制哪些日志事件应该被记录，哪些应该被忽略，从而提高日志系统的效率和可控性。</p><p><code>Logback</code>提供了多种内置的<code>Filters</code>，以及支持<strong>自定义Filters</strong>。下面是一些常见的内置Filters：</p><blockquote><ol><li><strong>LevelFilter</strong>：根据日志级别过滤日志事件，只处理符合指定级别范围的日志事件。</li><li><strong>ThresholdFilter</strong>：类似于<code>LevelFilter</code>，根据指定的阈值级别过滤日志事件。</li><li><strong>TurboFilter</strong>：高性能的过滤器，可以根据更复杂的条件过滤日志事件。</li><li><strong>MarkerFilter</strong>：根据Marker标记过滤日志事件，只处理带有特定<code>Marker</code>的日志事件。</li></ol></blockquote><p>比如我们需要过滤<code>ERROR</code>级别的日志信息，可以参考下面的配置:</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="line"><span class="token comment">&lt;!-- Logback 配置文件 --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">&lt;!-- 定义一个输出到控制台的 appender --&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>CONSOLE<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token comment">&lt;!-- 定义日志输出格式 --&gt;</span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">&lt;!-- 添加 LevelFilter 过滤器 --&gt;</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token comment">&lt;!-- 指定过滤级别为 ERROR --&gt;</span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">&gt;</span></span>ERROR<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token comment">&lt;!-- 匹配到 ERROR 级别的日志时拒绝 --&gt;</span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">&gt;</span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token comment">&lt;!-- 不匹配时不进行处理 --&gt;</span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">&gt;</span></span>NEUTRAL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">&lt;!-- 配置根节点的日志级别为 INFO --&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>INFO<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token comment">&lt;!-- 引用 CONSOLE appender --&gt;</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>CONSOLE<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了使用这种配置文件的方式进行过滤之外，<code>logback</code>也提供了代码方式的过滤，比如依旧实现上面的需求，用代码可以这样写。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleFilter</span> <span class="token keyword">extends</span> <span class="token class-name">Filter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ILoggingEvent</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">FilterReply</span> <span class="token function">decide</span><span class="token punctuation">(</span><span class="token class-name">ILoggingEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;ERROR&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token class-name">FilterReply</span><span class="token punctuation">.</span><span class="token constant">ACCEPT</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">FilterReply</span><span class="token punctuation">.</span><span class="token constant">DENY</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再配置文件中将上面编写好的过滤规则添加进去:</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="line"><span class="token comment">&lt;!-- Logback 配置文件 --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">&lt;!-- 定义一个输出到控制台的 appender --&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>console<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token comment">&lt;!-- 定义日志输出格式 --&gt;</span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>%d{HH:mm:ss.SSS} %-5level %logger{36} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">&lt;!-- 添加自定义的 SampleFilter 过滤器 --&gt;</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.ilikexff.springsecuritydemo2.filter.SampleFilter<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">&lt;!-- 配置根节点的日志级别为 INFO --&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>info<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token comment">&lt;!-- 引用 console appender --&gt;</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>console<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行程序，发现控制台和日志文件中都只有<code>ERROR</code>级别的日志信息了，<code>Ojbk!</code>；</p><p><img src="https://images.waer.ltd/notes/image-20240424214719787.png" alt="image-20240424214719787"></p><hr><h2 id="_4-小结一下" tabindex="-1"><a class="header-anchor" href="#_4-小结一下"><span>4. 小结一下</span></a></h2><p>这篇文章从<code>Slf4J</code>入手，梳理了这个日志框架的基本概念和用法，随之引出了基于<code>Slf4j</code>实现的<code>logback</code>，并详细讲解了相关的使用方法，当然，文章至此已将近6700字，而这不是<code>typora</code>的上限，也不是<code>CSDN</code>的上限，自然也不是你我的上限，只是确实夜太深，有些寂寞了...溜了溜了。</p><blockquote><p>后续内容将逐步在<a href="https://www.ilikexff.cn" target="_blank" rel="noopener noreferrer">我的博客</a>端进行不定期更新，因为<code>CSDN</code>文章更新后并没有任何提示，我的博客有订阅功能，这一点来说，在博客端更新确实是不错的选择，感谢阅读!</p></blockquote><hr>`,115),l=[e];function o(c,i){return a(),s("div",null,l)}const r=n(p,[["render",o],["__file","Slf4j与Logback实用指南(基于Gradle).html.vue"]]),k=JSON.parse('{"path":"/posts/Slf4j%E4%B8%8ELogback%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97(%E5%9F%BA%E4%BA%8EGradle).html","title":"Slf4j与Logback实用指南(基于Gradle)","lang":"en-US","frontmatter":{"date":"2024-05-07T00:00:00.000Z","category":["Slf4j"],"tag":["Java","日志管理"],"excerpt":"<p style=\\"color:gray;\\">本文将深入探讨slf4j和logback日志框架的核心概念、使用方法、最佳实践以及高级技巧。我们将介绍如何配置日志记录器、如何使用标记（Markers）来区分日志消息、如何进行日志级别的动态调整以及如何利用logback的各种功能来优化日志记录体验。</p>"},"headers":[{"level":2,"title":"1. 引盐","slug":"_1-引盐","link":"#_1-引盐","children":[]},{"level":2,"title":"2. SLF4J框架","slug":"_2-slf4j框架","link":"#_2-slf4j框架","children":[{"level":3,"title":"2.1 基本组件","slug":"_2-1-基本组件","link":"#_2-1-基本组件","children":[]},{"level":3,"title":"2.2 日志级别","slug":"_2-2-日志级别","link":"#_2-2-日志级别","children":[]},{"level":3,"title":"2.3 Slf4J基本使用","slug":"_2-3-slf4j基本使用","link":"#_2-3-slf4j基本使用","children":[]}]},{"level":2,"title":"3. Logback","slug":"_3-logback","link":"#_3-logback","children":[{"level":3,"title":"3.1 导入依赖","slug":"_3-1-导入依赖","link":"#_3-1-导入依赖","children":[]},{"level":3,"title":"3.2 配置logback","slug":"_3-2-配置logback","link":"#_3-2-配置logback","children":[]}]},{"level":2,"title":"4. 小结一下","slug":"_4-小结一下","link":"#_4-小结一下","children":[]}],"git":{"updatedTime":1718336313000,"contributors":[{"name":"八尺","email":"ilikexff@gmail.com","commits":1}]},"filePathRelative":"posts/Slf4j与Logback实用指南(基于Gradle).md"}');export{r as comp,k as data};
