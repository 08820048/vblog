import{_ as n,c as s,o as a,a as e}from"./app-BiyYV_xq.js";const t={},p=e(`<h1 id="如何写得一手优雅规范的springboot-接口" tabindex="-1"><a class="header-anchor" href="#如何写得一手优雅规范的springboot-接口"><span>如何写得一手优雅规范的SpringBoot 接口</span></a></h1><h2 id="导语" tabindex="-1"><a class="header-anchor" href="#导语"><span>导语</span></a></h2><blockquote><p>优雅的代码赏心悦目，你的代码触目惊心。</p></blockquote><p>当编写 <code>Spring Boot</code> 接口时，优雅和规范是至关重要的。一个良好设计的接口能够提高代码的可读性、可维护性和可扩展性，从而为整个应用程序的开发和维护带来便利。</p><p>在本文中，我们将探讨如何通过遵循最佳实践和设计原则，编写出优雅规范的<code> Spring Boot</code> 你的接口也可以像企业级项目接口一般规范且优雅。</p><hr><h2 id="严格遵循restful-api-设计原则" tabindex="-1"><a class="header-anchor" href="#严格遵循restful-api-设计原则"><span>严格遵循<code>RESTful API </code>设计原则</span></a></h2><ul><li>清晰一致的资源命名：使用准确反映 <code>API </code>管理的资源的名词（例如，<code>/articles、/users</code>）。</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/articles/{id}&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">&gt;</span></span> <span class="token function">getArticleById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>标准化 <code>HTTP </code>方法：遵循 <code>CRUD </code>操作的 <code>RESTful</code> 约定（<code>CREATE： POST、READ： GET、UPDATE： PUT、DELETE：DELETE</code>）。</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/users&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>有意义的状态代码：返回相应的 <code>HTTP </code>状态代码,如成功 （<code>2xx</code>）、错误 （<code>4xx</code>） 或服务器问题 （<code>5xx</code>）。</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/articles/{id}&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">deleteArticle</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>productService<span class="token punctuation">.</span><span class="token function">deleteArticle</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">noContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 204 No Content</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">notFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 404 Not Found</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于更多<code>restful</code>标准，参考<a href="https://en.wikipedia.org/wiki/REST" target="_blank" rel="noopener noreferrer"><code>https://en.wikipedia.org/wiki/REST</code></a></p><hr><h2 id="合理利用好-spring-boot-注解" tabindex="-1"><a class="header-anchor" href="#合理利用好-spring-boot-注解"><span>合理利用好 Spring Boot 注解</span></a></h2><p>这里所谓得合理，不是很好定义，但本着高效、简洁、清晰得原则推荐。</p><ul><li><code>@RestController</code>：默认情况下，将控制器标记为返回 <code>JSON</code> 或其他结构化数据。</li></ul><blockquote><p>这是一个综合注解，是<code>@Controller</code> 和 <code>@ResponseBody</code>的功能于一身，一个注解作两个注解的事情，简洁高效。</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@RestController</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// .....</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>@RequestMapping</code>：定义每个<code>controller</code>的基本路径。</li></ul><blockquote><p>这样做可以使代码更加整洁和易于维护。不需要在每个方法上都重复写基本路径部分,在类级别定义基本路径可以带来更清晰、更简洁、更易维护的代码结构，同时也有助于提高开发效率和代码质量。</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@RestController</span></span>
<span class="line"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// .....</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用简化的请求方式注解。</li></ul><blockquote><p>在不同类型的方法上直接使用<code>@GetMapping、@PostMapping、@PutMapping@DeleteMapping</code>注解进行标识，而不是使用笼统的<code> @RequestMapping(method = RequestMethod.POST)</code>。</p></blockquote><ul><li>使用<code>@PathVariable</code>获取请求的路径变量；</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@RestController</span></span>
<span class="line"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/articles&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArticleController</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/{id}&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">&gt;</span></span> <span class="token function">getArticleById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 根据文章的id查询文章</span></span>
<span class="line">        <span class="token class-name">Article</span> article <span class="token operator">=</span> articleService<span class="token punctuation">.</span><span class="token function">findArticleById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>article <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">notFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用<code>@RequestBody</code>将请求正文内容反序列化为 Java 对象。</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@RestController</span></span>
<span class="line"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/api&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/users&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 这里的 User 对象会从请求的 JSON 数据中反序列化得到</span></span>
<span class="line">        userService<span class="token punctuation">.</span><span class="token function">saveUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="关于依赖注入的使用建议" tabindex="-1"><a class="header-anchor" href="#关于依赖注入的使用建议"><span>关于依赖注入的使用建议</span></a></h2><ul><li>使用构造函数注入方式</li></ul><blockquote><p>通过在类的构造函数中接受依赖对象作为参数来进行注入。这种方式可以确保依赖在对象创建时被注入，提高了代码的可测试性和可维护性。</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@RestController</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductController</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ProductService</span> productService<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ProductController</span><span class="token punctuation">(</span><span class="token class-name">ProductService</span> productService<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>productService <span class="token operator">=</span> productService<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// ... other controller methods</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="针对接口的异常处理" tabindex="-1"><a class="header-anchor" href="#针对接口的异常处理"><span>针对接口的异常处理</span></a></h2><ul><li><code>@ControllerAdvice</code>的使用</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@ControllerAdvice</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiExceptionHandler</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">ArticleNotFoundException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ErrorResponse</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleArticleNotFound</span><span class="token punctuation">(</span><span class="token class-name">ArticleNotFoundException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// ... create error response with details</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">NOT_FOUND</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>errorResponse<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="使用dto代替pojo的直接使用" tabindex="-1"><a class="header-anchor" href="#使用dto代替pojo的直接使用"><span>使用<code>DTO</code>代替<code>POJO</code>的直接使用</span></a></h2><blockquote><p>对于数据传输对象，建议对<code>pojo</code>进行<code>dto</code>的封装，而不是使用原实体。提高代码的可读性、可维护性和数据封装性。</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArticleDto</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> contents<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// more</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="接口安全的建议" tabindex="-1"><a class="header-anchor" href="#接口安全的建议"><span>接口安全的建议</span></a></h2><ul><li>使用<code>SpringSecurity</code>等安全框架进行认证授权，包括令牌机制的使用，如<code>JWT</code>。</li><li>对接口进行常见的漏洞检查并采取防范措施，比如<code>XSS</code>和<code>SQL</code>注入等。</li><li>使用<code>https</code>进行网络通信；</li></ul><hr><h2 id="关于版本控制" tabindex="-1"><a class="header-anchor" href="#关于版本控制"><span>关于版本控制</span></a></h2><ul><li>使用路径版本控制（例如，<code>/api/v1/articles</code>）或基于标头的版本控制。</li></ul><blockquote><p>使用版本控制 <code>API </code>来管理更改并保持与客户端的兼容性。</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@RestController</span></span>
<span class="line"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/api/products&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductController</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/details&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getProductDetails</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Accept-Version&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> version<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;v1&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>version<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token string">&quot;Product details for version 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;v2&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>version<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token string">&quot;Product details for version 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">badRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">&quot;Unsupported version&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="完备的接口测试" tabindex="-1"><a class="header-anchor" href="#完备的接口测试"><span>完备的接口测试</span></a></h2><ul><li>考虑使用 <code>Mockito </code>或 <code>JUnit </code>等工具对每个接口进行测试，保证接口的准确性和稳健性。</li></ul><hr><h2 id="本文小结" tabindex="-1"><a class="header-anchor" href="#本文小结"><span>本文小结</span></a></h2><p>上面虽然列举好几种编写接口的规范和建议，但这些不是一成不变的，在具体的项目，还需要根据业务和项目需求做出一些让步和改动，灵活运用这些建议，你的接口也可以很优雅。<strong>代码就是一行行蓝色的诗，而不是冰冷乏味的英文串</strong>。</p>`,56),l=[p];function c(o,i){return a(),s("div",null,l)}const d=n(t,[["render",c],["__file","如何写得一手优雅规范的SpringBoot 接口.html.vue"]]),r=JSON.parse('{"path":"/posts/%E5%A6%82%E4%BD%95%E5%86%99%E5%BE%97%E4%B8%80%E6%89%8B%E4%BC%98%E9%9B%85%E8%A7%84%E8%8C%83%E7%9A%84SpringBoot%20%E6%8E%A5%E5%8F%A3.html","title":"如何写得一手优雅规范的SpringBoot 接口","lang":"en-US","frontmatter":{"date":"2024-05-10T00:00:00.000Z","category":["SpringBoot"],"tag":["API","Java"],"excerpt":"<p style=\\"color:gray;\\">编写 `Spring Boot` 接口时，优雅和规范是至关重要的。一个良好设计的接口能够提高代码的可读性、可维护性和可扩展性，从而为整个应用程序的开发和维护带来便利。</p>"},"headers":[{"level":2,"title":"导语","slug":"导语","link":"#导语","children":[]},{"level":2,"title":"严格遵循RESTful API 设计原则","slug":"严格遵循restful-api-设计原则","link":"#严格遵循restful-api-设计原则","children":[]},{"level":2,"title":"合理利用好 Spring Boot 注解","slug":"合理利用好-spring-boot-注解","link":"#合理利用好-spring-boot-注解","children":[]},{"level":2,"title":"关于依赖注入的使用建议","slug":"关于依赖注入的使用建议","link":"#关于依赖注入的使用建议","children":[]},{"level":2,"title":"针对接口的异常处理","slug":"针对接口的异常处理","link":"#针对接口的异常处理","children":[]},{"level":2,"title":"使用DTO代替POJO的直接使用","slug":"使用dto代替pojo的直接使用","link":"#使用dto代替pojo的直接使用","children":[]},{"level":2,"title":"接口安全的建议","slug":"接口安全的建议","link":"#接口安全的建议","children":[]},{"level":2,"title":"关于版本控制","slug":"关于版本控制","link":"#关于版本控制","children":[]},{"level":2,"title":"完备的接口测试","slug":"完备的接口测试","link":"#完备的接口测试","children":[]},{"level":2,"title":"本文小结","slug":"本文小结","link":"#本文小结","children":[]}],"git":{"updatedTime":1718336313000,"contributors":[{"name":"八尺","email":"ilikexff@gmail.com","commits":1}]},"filePathRelative":"posts/如何写得一手优雅规范的SpringBoot 接口.md"}');export{d as comp,r as data};
