import{_ as n,c as s,o as a,a as e}from"./app-BolSiLc-.js";const p={},t=e(`<h1 id="切面编程的综合指南" tabindex="-1"><a class="header-anchor" href="#切面编程的综合指南"><span>切面编程的综合指南</span></a></h1><h2 id="篇一、快速入门" tabindex="-1"><a class="header-anchor" href="#篇一、快速入门"><span>篇一、快速入门</span></a></h2><h3 id="_1-概念-术语解析" tabindex="-1"><a class="header-anchor" href="#_1-概念-术语解析"><span>1. 概念&amp;术语解析</span></a></h3><p><code>Spring的AOP</code>（面向切面编程）是一种编程范式，它允许开发人员将横切关注点（<code>cross-cutting concerns</code>）从应用程序的主要业务逻辑中分离出来，以便更好地实现代码重用和模块化。横切关注点指的是那些存在于应用程序多个模块中的功能，如日志记录、事务管理、安全性等，它们不属于单个类或对象，而是跨越多个组件的功能。</p><p>通过<code>AOP</code>，开发人员可以将这些横切关注点抽象为一个独立的模块，称为切面（<code>aspect</code>），并在需要的地方将其应用到应用程序中。在<code>Spring</code>框架中，<code>AOP</code>通过<code>AspectJ</code>实现，开发人员可以使用注解或配置来定义切面，并将其与应用程序中的特定连接点（<code>join points</code>）关联起来，从而实现横切关注点的功能注入。</p><p><code>Spring</code>的<code>AOP</code>使开发人员能够更好地实现关注点分离，提高代码的模块化程度，降低重复代码量，并提高代码的可维护性和可重用性。</p><p>换句话说，<code>AOP</code>可以在不改变原有核心业务代码逻辑的基础上增强业务方法功能的一种编程技术；</p><hr><h4 id="_1-1-使用案例" tabindex="-1"><a class="header-anchor" href="#_1-1-使用案例"><span>1.1 使用案例</span></a></h4><p>创建一个<code>SpringBoot</code>项目，导入下面的启动器依赖以使用<code>@Aspect</code>注解；</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="line"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-aop --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.2.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>AspectJ</code>是一种流行的<code>AOP</code>框架，可以更方便的整合使用<code>AOP</code> ,在<code>SpringBoot</code>项目中，<code> spring-boot-starter-aop</code>依赖会自动引入<code>AspectJ</code>依赖，以便能够方便地使用<code>AspectJ</code>来实现面向切面编程。</p><p>既然是对目标方法的进行增强，那么我们就需要指定一个或者多个要增强的对象，比如指定对<code>Service</code>下的某个业务方法进行增强或者是对整个<code>Service</code>包下的所有方法进行增强等等；在刚才创建的<code>SpringBoot</code>项目中考虑下面的项目结构:</p><p><img src="https://images.waer.ltd/notes/image-20240322161521990.png" alt="image-20240322161521990"></p><p>为使用<code>AOP</code>创建一个独立的<code>aspect</code>包，包下继续创建一个切面类<code>MyAspect</code>，用来编写切面编程的核心逻辑；注意不要忘了给该类加上<code>@Component</code>和<code>Aspect</code>注解；</p><blockquote><ul><li><code>@Component</code> 注解用于标识一个类作为<code>Spring</code>组件，并由<code>Spring</code>容器进行管理。被 <code>@Component</code> 标记的类会被自动扫描并注册为<code>Spring</code>应用上下文中的一个<code>bean</code>，可以通过依赖注入等方式在应用程序中使用。</li><li><code>@Aspect</code> 注解用于定义一个切面，即包含通知（<code>advice</code>）和切点（<code>pointcut</code>）的类。切面是<code>AOP</code>中的一个重要概念，它包含了在何时、何地以及如何应用横切关注点的逻辑。通过 <code>@Aspect</code> 注解标记的类可以定义通知类型（如前置通知、后置通知、环绕通知等），并与切点关联，从而实现在特定连接点执行特定操作的功能。</li></ul></blockquote><p>在切面类中定义一个没有返回值要求的方法，加上<code>@Point</code>注解如下:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"> <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">&quot;execution(* cn.ilikexff.springaop.service.*.*(..))&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@Pointcut(&quot;execution(* cn.ilikexff.springaop.service.*.*(..))&quot;)</code></p><p>这个表达式的含义是定义了一个切点，用来匹配 <code>cn.ilikexff.springaop.service</code> 包下所有类的所有方法。具体解释如下：</p><ul><li><code>execution</code> : 表示匹配方法执行的连接点。</li><li>第一个 <code>*</code> 表示匹配任意返回类型的方法。</li><li><code>cn.ilikexff.springaop.service.*</code> : 表示匹配该包名下的任意类。</li><li>第三个 <code>*</code> 表示匹配类中的任意方法。</li><li><code>(..)</code> : 表示匹配任意参数的方法。</li></ul><p>因此，这个切点表达式会匹配 <code>cn.ilikexff.springaop.service</code> 包下所有类的所有方法，无论返回类型和参数如何都将被该切面关注到；</p><p>通过切点表达式指定了需要切面关注的类或方法之后，接下来就是编写具体的增强方法了，用于在不同方向对指定方法进行增强的逻辑；比如</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">&quot;pt()&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforeMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;前至增强通知方法被执行....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于切点可以有多个，因此在使用某个增强方法时需要通过不同的切点方法进行指定，比如上面代码中的<code>@Before(&quot;pt()&quot;)</code>就是指定在切点方法<code>pt()</code>指定的方法执行之前先执行下面的增强逻辑，这里也就是打印一句 <strong>前至增强通知方法被执行....</strong>；</p><p>在<code>UserService</code>中简单写一个方法进行测试，看看切面方法是否会在<code>Service</code>方法执行之前执行；</p><p><img src="https://images.waer.ltd/notes/image-20240322165758093.png" alt="image-20240322165758093"></p><p>当我们调用<code>Controller</code>中对应的方法发起请求时，控制台的打印内容如下:</p><p><img src="https://images.waer.ltd/notes/image-20240322165914761.png" alt="image-20240322165914761"></p><p>可以看到，结果也是如我们所料，切面中定义的逻辑会在切点指定方法执行之前被优先执行，通过切面编程的方式增强原有的业务逻辑不会对源代码进行入侵以及产生耦合；</p><hr><h4 id="_1-2-通知类型" tabindex="-1"><a class="header-anchor" href="#_1-2-通知类型"><span>1.2 通知类型</span></a></h4><p>当然，这里是使用了<code>@Before</code>注解来指定执行的时机，在实际的项目开发中，除了<code>@Before</code>之外，还有其他几个常用的类似注解：</p><p><img src="https://images.waer.ltd/notes/image-20240322211724873.png" alt="image-20240322211724873"></p><ol><li><code>@Before</code> : 在目标方法执行之前执行。</li><li><code>@After</code> : 在目标方法执行之后执行，无论方法是否抛出异常。</li><li><code>@AfterReturning</code> : 在目标方法成功返回之后执行。</li><li><code>@AfterThrowing</code> : 在目标方法抛出异常后执行。</li><li><code>@Around</code> : <strong>包围目标方法，可以在方法执行前后都执行自定义逻辑。</strong></li></ol><p>他们的使用方式和案例演示用的前置通知类似，建议自己动手挨个儿用一遍加深印象。其中需要特别注意的是<code>@Around</code>环绕通知类型，这是在日常使用过程中频率较高、功能更强的一中通知注解，所以这里单独拎出来讲两句；</p><p>在使用环绕通知的时候，需要注意添加对应的参数<code>ProceedingJoinPoint</code>，通过源码可以看到，它是<code>JoinPoint</code>的子接口，表示可以执行的连接点。</p><p>在环绕通知中， <code>ProceedingJoinPoint</code> 提供了<code>proceed()</code>方法，用于显式地调用目标方法的执行。 - <code>pjp.proceed()</code> 是环绕通知中的关键方法，调用 <code>proceed()</code> 方法会执行目标方法，并<strong>返回目标方法的返回值</strong>。 可以在调用 <code>proceed()</code> 方法之前和之后编写自定义的逻辑，实现对目标方法执行过程的控制和干预。</p><p><img src="https://images.waer.ltd/notes/image-20240322213104841.png" alt="image-20240322213104841"></p><p>因此可以用来替代 <code>@Before</code> 和 <code>@After</code> 通知，提供了更灵活的控制和处理机制。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">&quot;pt()&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">AroundMethod</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> pjp<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;环绕通知方法被执行...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">        pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通知目标方法执行</span></span>
<span class="line">        <span class="token comment">// 这里可以书写目标方法执行之后的增强逻辑</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;目标方法出现异常...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 相当于@AfterThrowing</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;进入finally..&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>被增强方法相关信息的获取</strong></p><p>在环绕通知中提到了一个重要的<code>ProceedingJoinPoint</code>参数该参数可以实现相关信息的获取，具体放在后面讲，那么在另外其他几中通知类型中如何获取被增强方法的相关信息呢？</p><p>方法其实也简单，那就是在我们的通知方法中传递一个<code>JoinPoint</code>类型的参数，下面是<code>JoinPoint</code>的部分实现源码:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * JoinPoint接口定义了AOP中连接点的相关信息和操作方法</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">JoinPoint</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 不同连接点的类型常量</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token constant">METHOD_EXECUTION</span> <span class="token operator">=</span> <span class="token string">&quot;method-execution&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token constant">METHOD_CALL</span> <span class="token operator">=</span> <span class="token string">&quot;method-call&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token constant">CONSTRUCTOR_EXECUTION</span> <span class="token operator">=</span> <span class="token string">&quot;constructor-execution&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token constant">CONSTRUCTOR_CALL</span> <span class="token operator">=</span> <span class="token string">&quot;constructor-call&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token constant">FIELD_GET</span> <span class="token operator">=</span> <span class="token string">&quot;field-get&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token constant">FIELD_SET</span> <span class="token operator">=</span> <span class="token string">&quot;field-set&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token constant">STATICINITIALIZATION</span> <span class="token operator">=</span> <span class="token string">&quot;staticinitialization&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token constant">PREINITIALIZATION</span> <span class="token operator">=</span> <span class="token string">&quot;preinitialization&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token constant">INITIALIZATION</span> <span class="token operator">=</span> <span class="token string">&quot;initialization&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token constant">EXCEPTION_HANDLER</span> <span class="token operator">=</span> <span class="token string">&quot;exception-handler&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token constant">SYNCHRONIZATION_LOCK</span> <span class="token operator">=</span> <span class="token string">&quot;lock&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token constant">SYNCHRONIZATION_UNLOCK</span> <span class="token operator">=</span> <span class="token string">&quot;unlock&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token constant">ADVICE_EXECUTION</span> <span class="token operator">=</span> <span class="token string">&quot;adviceexecution&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 返回连接点类型的字符串表示</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 返回连接点的简短字符串表示</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token function">toShortString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 返回连接点的详细字符串表示</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token function">toLongString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 获取当前代理对象</span></span>
<span class="line">    <span class="token class-name">Object</span> <span class="token function">getThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 获取目标对象</span></span>
<span class="line">    <span class="token class-name">Object</span> <span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 获取连接点的参数</span></span>
<span class="line">    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 获取连接点的签名信息</span></span>
<span class="line">    <span class="token class-name">Signature</span> <span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 获取连接点的源代码位置信息</span></span>
<span class="line">    <span class="token class-name">SourceLocation</span> <span class="token function">getSourceLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 获取连接点的类型</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token function">getKind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 获取连接点的静态部分信息</span></span>
<span class="line">    <span class="token class-name">StaticPart</span> <span class="token function">getStaticPart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 静态内部接口，表示连接点的静态部分</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EnclosingStaticPart</span> <span class="token keyword">extends</span> <span class="token class-name">StaticPart</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 静态内部接口，表示连接点的静态部分</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StaticPart</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 获取连接点的签名信息</span></span>
<span class="line">        <span class="token class-name">Signature</span> <span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 获取连接点的源代码位置信息</span></span>
<span class="line">        <span class="token class-name">SourceLocation</span> <span class="token function">getSourceLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 获取连接点的类型</span></span>
<span class="line">        <span class="token class-name">String</span> <span class="token function">getKind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 获取连接点的唯一标识符</span></span>
<span class="line">        <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 返回连接点的字符串表示</span></span>
<span class="line">        <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 返回连接点的简短字符串表示</span></span>
<span class="line">        <span class="token class-name">String</span> <span class="token function">toShortString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 返回连接点的详细字符串表示</span></span>
<span class="line">        <span class="token class-name">String</span> <span class="token function">toLongString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>刚开始源码看不懂或者太复杂不想看不要紧，最主要得自己多写，可以通过断点或者参数打印得方式去了解他们得用法以及基本得逻辑 &quot;科研&quot; 搞多了自然也就理解得相对深刻了；</p></blockquote><p>该类型的参数中封装了被增强方法的相关信息，通过该参数，我们可以获取到 <strong>除异常对象和返回值之外的所有信息</strong>。</p><p>众多信息中，<code> Signature getSignature();</code>是一个比较重要的方法，但在实际使用中一般使用它的实现类<code>MemberSignature</code>，该实现类实现了更多目标方法的信息，实用性更强；</p><p>下面是该方法的一个构造图示：</p><p><img src="https://images.waer.ltd/notes/image-20240322221935476.png" alt="image-20240322221935476"></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 输出被调用方法得简单日志信息</span>
<span class="line"> */</span></span>
<span class="line"><span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">&quot;pt()&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printMethodLogs</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 被执行方法所在类的类名、方法名、方法传入的参数</span></span>
<span class="line">    <span class="token class-name">MethodSignature</span> signature   <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MethodSignature</span><span class="token punctuation">)</span>  joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;方法所在类的类名:&quot;</span><span class="token operator">+</span>signature<span class="token punctuation">.</span><span class="token function">getDeclaringType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;方法名:&quot;</span><span class="token operator">+</span>signature<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;方法参数:&quot;</span><span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码执行之后控制台输出信息:</p><p><img src="https://images.waer.ltd/notes/image-20240322223119377.png" alt="image-20240322223119377"></p><p>那么，如何获取目标方法中的异常对象或者返回值呢？实现的方式多种，可以在<code>@AfterThrowing</code>或者<code>@AfterReturning</code>通知方法中实现：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;pt()&quot;</span><span class="token punctuation">,</span>returning <span class="token operator">=</span> <span class="token string">&quot;ret&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">AfterReturning</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span><span class="token class-name">Object</span> ret<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 代码逻辑...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;pt()&quot;</span><span class="token punctuation">,</span>throwing <span class="token operator">=</span> <span class="token string">&quot;e&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">AfterReturning</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 代码逻辑...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>上面的示例代码中，分别通过<code>returning</code>和<code>throwing</code>指定的同名变量来接受返回值或异常对象的信息，从而实现目标方法返回值或异常对象的获取；</p></blockquote><p>显然，这样的写法是不够简洁的，繁琐的编码只会使得项目臃肿。不是<code>@AfterReturning</code>和<code>@AfterThrowing</code>用不起，而是<code>@Around</code>更有性价比!!!学习使用的方式也是差不多的模式</p><p><img src="https://images.waer.ltd/notes/image-20240322225100232.png" alt="image-20240322225100232"></p><p>注意，使用<code>@Around</code>的切面方法时，如果目标方法有返回值，那么通知方法就也需要返回值，如果没有对目标方法返回值有二次<code>DIY</code>需求的情况下，建议直接返回<code>pjp.proceed()</code>方法调用的返回值即可；</p><hr><p>通过上面的快速入门案例，相信对于切面编程已经有了一个大概的理解，下面在解释一些经常用到的术语概念，这样可以更好的理解这些晦涩难懂的名词；</p><ul><li><p><code>Pointcut</code>(切入点):被增强的连接点，通过切入点对待增强的具体方法进行连接；</p></li><li><p><code>Advice</code>（通知/增强）：具体增强的代码逻辑；</p><blockquote><p>上述案例中<code>beforeMethod()</code>方法的方法体，也就是<code>System.out.println(&quot;前至增强通知方法被执行....&quot;);</code></p></blockquote></li><li><p><code>Target</code>(目标对象)：被增强的对象就是目标对象；</p><blockquote><p>比如上面案例中增强的<code>Service</code>包下的所有类对象就是目标对象；</p></blockquote></li><li><p><code>Aspect</code>(切面)：切入点+通知的结合，每一个切入点和对应的增强逻辑组成一块切面；</p><blockquote><p>为什么我们新建的<code>MyAspect.java</code>叫切面类？因为这个类中就是每一个切点和通知组合而成的一个个切面；</p></blockquote></li><li><p><code>Proxy</code>(代理)：类被<code>AOP</code>增强之后，就产生一个代理类；这个可以通过断点的方式去查看生成的的类对象信息验证；</p><blockquote><p>如下图所示，这里生成的类对象就是通过<code>GCLIB</code>动态代理技术产生的一个新的代理类，而非原来的原生类；</p></blockquote></li></ul><p><img src="https://images.waer.ltd/notes/image-20240322172914991.png" alt="image-20240322172914991"></p><h4 id="_1-3-切点表达式" tabindex="-1"><a class="header-anchor" href="#_1-3-切点表达式"><span>1.3 切点表达式</span></a></h4><p>肯定还记得注解<code>@Pointcut</code>中的那串内容：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token string">&quot;execution(* cn.ilikexff.springaop.service.*.*(..))&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这就是一个 <strong>切点表达式</strong>，用来确定具体要增强类对象；针对这个具体得表达式得含义在上面案例中已经做出了具体得解释，这里会进一步细化切点表达式的一些概念和用法；语法：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token function">execution</span><span class="token punctuation">(</span><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> 返回值类型 报名<span class="token punctuation">.</span>类名<span class="token punctuation">.</span>方法名<span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>注意：</p><ol><li>访问修饰符(<code>public/private/protected/default</code>等可以省略)；</li><li>返回值类型、包名、类名、类名以及方法名可以使用<code>*</code>代表任意，星号代表任意或者全部，这种语义并不只是用在了切点表达式中，而是很多领域的通用用法，所以这很好理解；</li><li>参数列表可以使用两个点<code>..</code>来表示任意的个数，任意类型的参数；</li><li>包名与类名之间的点<code>.</code>表示当前包下的类，两个点<code>..</code>表示当前包及其子包下的类；</li></ol><p>例如:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token number">1.</span> 匹配指定包下所有类的所有方法：</span>
<span class="line">   <span class="token operator">-</span>  \`<span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>service<span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\` </span>
<span class="line"></span>
<span class="line"><span class="token number">2.</span> 匹配指定包及其子包下所有类的所有方法：</span>
<span class="line">   <span class="token operator">-</span>  \`<span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>service<span class="token punctuation">.</span><span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\` </span>
<span class="line"></span>
<span class="line"><span class="token number">3.</span> 匹配指定类的所有方法：</span>
<span class="line">   <span class="token operator">-</span>  \`<span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span>MyService</span><span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\` </span>
<span class="line"></span>
<span class="line"><span class="token number">4.</span> 匹配指定类中以<span class="token string">&quot;get&quot;</span>开头的方法：</span>
<span class="line">   <span class="token operator">-</span>  \`<span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span>MyService</span><span class="token punctuation">.</span>get<span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\` </span>
<span class="line"></span>
<span class="line"><span class="token number">5.</span> 匹配指定包下返回类型为<span class="token class-name">String</span>的方法：</span>
<span class="line">   <span class="token operator">-</span>  \`<span class="token function">execution</span><span class="token punctuation">(</span><span class="token class-name">String</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>service<span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\` </span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="_1-4-切点函数" tabindex="-1"><a class="header-anchor" href="#_1-4-切点函数"><span>1.4 切点函数</span></a></h4><p><code>@annotation</code> 是<code>Spring AOP</code>中另外一种用于定义切点的方式，它可以用来匹配带有特定注解的连接点。通过 <code>@annotation</code> 切点函数，可以实现在特定注解标记的方法上应用切面逻辑。</p><p>切点函数的基本使用步骤:</p><ol><li>根据业务信息写一个<strong>自定义注解</strong>；</li><li>在需要增强的方法上加上该自定义注解；</li><li>在切面类中的切点方法上的<code>@Pointcut()</code>注解中加上自定义注解的全类名；</li><li>启动项目，使用切面函数成功；</li></ol><p>比如，如果我们将上面案例中切点表达式的方式改为切点函数的方式的过程如下:</p><ul><li><p>自定义注解</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyLogAnn</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在要增强的目标对象(<code>Target</code>)上的具体方法上加上这个自定义的注解；</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@MyLogAnn</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">userInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Service的userInfo方法被执行...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&quot;这些是用户信息...&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在切面类中的切点方法上的<code>@Pointcut()</code>注解中加上自定义注解的全类名；</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">//   @Pointcut(&quot;execution(* cn.ilikexff.springaop.service.*.*(..))&quot;)</span></span>
<span class="line"><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">&quot;@annotation(cn.ilikexff.springaop.ann.MyLogAnn)&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>再次启动项目即可；</p></li></ul><p><strong>切点表达式&amp;函数的使用建议</strong></p><p><img src="https://images.waer.ltd/notes/image-20240322210915411.png" alt="image-20240322210915411"></p><p>在实际的项目开发中，可以参考上面两种不同方式的优势特点以及项目具体需求和场景选择合适的方式来实现<code>AOP</code>功能。</p><hr><h4 id="_1-5-多切面的排序问题" tabindex="-1"><a class="header-anchor" href="#_1-5-多切面的排序问题"><span>1.5 多切面的排序问题</span></a></h4><p>非<code>XML</code>方式配置的<code>AOP</code>可以使用注解<code>@Order</code>来控制顺序。</p><p><code>@Order</code>注解是<code>Spring</code>框架中的一个注解，用于控制<code>Bean</code>的加载顺序。通过在<code>Bean</code>上使用<code>@Order</code>注解，可以指定<code>Bean</code>加载的顺序。值越小，优先级越高，加载顺序越靠前。</p><hr><p>未完待续...</p>`,88),c=[t];function o(l,i){return a(),s("div",null,c)}const d=n(p,[["render",o],["__file","切面编程的综合指南.html.vue"]]),r=JSON.parse('{"path":"/posts/%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B%E7%9A%84%E7%BB%BC%E5%90%88%E6%8C%87%E5%8D%97.html","title":"切面编程的综合指南","lang":"en-US","frontmatter":{"date":"2024-05-13T00:00:00.000Z","category":["AOP"],"tag":["AOP"],"excerpt":"<p style=\\"color:gray;\\">Spring的AOP（面向切面编程）是一种编程范式，它允许开发人员将横切关注点（`cross-cutting concerns`）从应用程序的主要业务逻辑中分离出来，以便更好地实现代码重用和模块化。横切关注点指的是那些存在于应用程序多个模块中的功能，如日志记录、事务管理、安全性等，它们不属于单个类或对象，而是跨越多个组件的功能。</p>"},"headers":[{"level":2,"title":"篇一、快速入门","slug":"篇一、快速入门","link":"#篇一、快速入门","children":[{"level":3,"title":"1. 概念&术语解析","slug":"_1-概念-术语解析","link":"#_1-概念-术语解析","children":[]}]}],"git":{"updatedTime":1718336313000,"contributors":[{"name":"八尺","email":"ilikexff@gmail.com","commits":1}]},"filePathRelative":"posts/切面编程的综合指南.md"}');export{d as comp,r as data};
