import{_ as n,c as s,o as a,a as e}from"./app-BolSiLc-.js";const t={},p=e(`<h1 id="spring-security5-x到spring-security6-x的迁移" tabindex="-1"><a class="header-anchor" href="#spring-security5-x到spring-security6-x的迁移"><span>Spring Security5.x到Spring Security6.x的迁移</span></a></h1><h2 id="_1-啰里吧嗦" tabindex="-1"><a class="header-anchor" href="#_1-啰里吧嗦"><span>1. 啰里吧嗦</span></a></h2><p>之前有写过一篇关于<code>Spring Security</code>的文章，但那已经是相对比较旧的版本了，就目前<code>Spring Security6.0</code>来说，这其中出现了不少的变动和更新，很多<code>API</code>的使用也是有不小的变化，所以我觉得有必要学习一下。但这篇文章的重点放在<code>SpringSecurity6.x</code>的新变动了解以及<code>SpringSecurity5.x</code>版本的迁移上。</p><hr><h2 id="_2-阅读前提" tabindex="-1"><a class="header-anchor" href="#_2-阅读前提"><span>2. 阅读前提</span></a></h2><p>这里写什么呢？<code>SpringSecurity6.0+</code>版本都更新了些什么东西，这里就简单给各位整理一下。注意这里所整理的一些更新是相较于<code>SpringSecurity5</code>版本来说的，因此这部分的内容并不适合小白阅读，因为这是建立在你已经有了一些<code>SpringSecurity</code>基础的前提下的，所以如果是完全没学过<code>SpringSecurity</code>的童鞋，建议看看这篇<a href="https://blog.csdn.net/2302_76401343/article/details/137432951?spm=1001.2014.3001.5502" target="_blank" rel="noopener noreferrer">上古掌控安全的神:SpringSecurity初探揭秘</a>。它是是基于<code>SpringSecurity5</code>版本的快速入门文章，老肩巨猾,很好看，去看看吧。</p><h3 id="_2-1-spring-boot和spring-security的版本关系" tabindex="-1"><a class="header-anchor" href="#_2-1-spring-boot和spring-security的版本关系"><span>2.1 Spring Boot和Spring Security的版本关系</span></a></h3><p><code>Spring Boot 2 </code>默认为 <code>Spring Security 5</code>，而 <code>Spring Boot 3 </code>使用 <code>Spring Security 6</code>。所以记住这一点，后续系列的文章所有的案例都是基于<code>SpringBoot3</code>以及<code>Gradle</code>的组合来进行的，当然，如果你还是<code>Maven</code>玩家，其实就理解学习层面来说并没有本质上的影响，无非是在实际的项目中更换一种构建方式罢了，不要觉得一看到是<code>Gradle</code>系的例子就跑路:</p><p>&quot;哎呦！这项目没用我心爱的<code>Maven</code>，不适合我，溜了溜了!!&quot;</p><h3 id="_2-2-spring-security-6-新的变动" tabindex="-1"><a class="header-anchor" href="#_2-2-spring-security-6-新的变动"><span>2.2 Spring Security 6 新的变动</span></a></h3><p><img src="https://images.waer.ltd/notes/image-20240420184640041.png" alt="image-20240420184640041"></p><p><code>Spring Security 6</code> 引入了多项功能更新，以提高安全性和健壮性。<strong>它现在至少需要 Java 版本 17 并使用 <code>jakarta </code>命名空间。</strong>，这个<code>Java17</code>可能听说过，但是<code>jakarta </code>是什么鬼可能很多人没有了解过(这其中就有我一席之地)，下面是来自 <strong>通义千文</strong> 的解释:</p><blockquote><p>Jakarta 命名空间是Java生态系统中用于标识一组特定技术规范和API的标准前缀。这个命名空间起源于开源社区对Java企业版（Java EE）规范的继任者——Jakarta EE项目中的API和组件的重新命名。</p><p><strong>背景</strong>：</p><ul><li><strong>Java EE</strong>：最初由Sun Microsystems（后被Oracle收购）主导开发，是一套用于构建企业级Java应用程序的标准和规范集合，包括诸如Servlets、JSP、EJB、JMS、JPA等技术。这些规范定义了接口和行为，由第三方供应商（如IBM、Red Hat、Oracle等）提供具体的实现。Java EE规范中的API通常以<code>javax.*</code>命名空间开头。</li><li><strong>Oracle与Java EE</strong>：随着Oracle对Java EE的管理和发展方向引起社区的关注和担忧，2017年，Oracle宣布将Java EE移交给开源组织，并停止在Java EE 8之后的版本开发。随后，Eclipse基金会接手了Java EE的后续开发工作，并将其重命名为Jakarta EE。</li><li><strong>Jakarta EE</strong>：作为Java EE的开源替代品，Jakarta EE保留了大部分原有Java EE规范的功能和目标，但在治理模式、开发流程和知识产权等方面遵循更加开放和社区驱动的原则。为了反映这一转变，并避免与Oracle的商标权冲突，Eclipse基金会决定将所有相关的API包名从<code>javax.*</code>改为<code>jakarta.*</code>，形成了Jakarta命名空间。</li></ul><p><strong>Jakarta命名空间的意义</strong>：</p><ol><li><strong>法律与商标独立</strong>：更改至<code>jakarta.*</code>命名空间，标志着这些技术规范与Oracle的商标权脱钩，完全由Eclipse基金会和开源社区掌控，不受单一商业公司的控制。</li><li><strong>技术演进的新开端</strong>：Jakarta EE不仅沿袭了Java EE的核心规范，还在其基础上引入了新技术、新规范和现代化开发实践。使用新的命名空间象征着这一技术栈进入了一个新的发展阶段，不受过去版本约束，能够更快地响应市场需求和技术创新。</li><li><strong>清晰的版本分界</strong>：由于命名空间的改变，开发者和工具能够清楚地区分基于旧Java EE（<code>javax.*</code>）和新Jakarta EE（<code>jakarta.*</code>）构建的应用程序及其依赖。这有助于平滑迁移、避免混淆，并为兼容性问题提供了明确的基准。</li><li><strong>社区认同与生态建设</strong>：Jakarta命名空间体现了开源社区对这一技术栈所有权的认可和支持。随着越来越多的厂商和开发者采用Jakarta EE规范，围绕<code>jakarta.*</code>命名空间的开源库、框架、工具和服务生态系统逐渐形成，推动了企业级Java开发的持续发展。</li></ol></blockquote><p>别看™一大堆，其实你几乎可以不看他们，阅读一遍，有个简单的印象就好了。但<code>Java17</code>这块属于硬控，躲不开的。要想使用<code>Spring Security6</code>的话，还是得注意下哈。</p><p>下面简单列一下这个版本的主要变动:</p><ul><li>删除了 <code>WebSecurityConfigurerAdapter</code>，以支持基于组件的安全配置</li><li><code>authorizeRequests（）</code> 被删除并替换为 <code>authorizeHttpRequests（）</code> 以定义授权规则。</li><li>引入了 <code>requestMatcher（）</code> 和 <code>securityMatcher（）</code> 等方法来替换<code> antMatcher（）</code> 和 <code>mvcMatcher（）</code> 来配置请求资源的安全性 <ul><li><code>requestMatcher（）</code> 方法更安全，因为它为请求配置选择了适当的<code> RequestMatcher</code> 实现。</li></ul></li><li>弃用部分方法，如<code> cors（）</code> 和 <code>csrf（）</code> 推荐使用函数式编程。</li><li>一些注解上的变化....</li></ul><hr><h2 id="_3-版本升级" tabindex="-1"><a class="header-anchor" href="#_3-版本升级"><span>3. 版本升级</span></a></h2><p>基于上一个标题列出得更新，这部分将会简单分享一下，如何将你项目中的 <code>SpringSecurity5</code>版本升级到 <code>Spring Security6</code> 版本，以适应最新的特性；这不算一个很大的版本迁移，但有必要了解新版特性以及如何使用它们。</p><ul><li><code>@Configuration</code>不再是<code>@EnableWebSecurity</code>注的一部分。因此我们在新版本(没有特殊说明，这里以及后续说的新版本和旧版本分别指的是<code>SpringSecurity6</code>和<code>SpringSecurity5</code>)中需要同时给配置类加上这两个注解。</li><li>新版本删除了 <code>WebSecurityConfigurerAdapter </code>类，并采用基于组件的配置,我们在些<code>SpringSecurity</code>配置类时不再需要继承这个<code>WebSecurityConfigurerAdapter</code>，因此，结合上面两点，新版本的配置应该是下面这样的:</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token annotation punctuation">@EnableWebSecurity</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSecurityConfig</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// more....</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>新版本通过 <code>WebSecurityCustomizer bean</code> 来修改排除静态资源, 该接口替代了 <code>WebSecurityConfigurerAdapter </code>接口中的 <code>configure</code>。当然，现在大部分项目都是前后端分离，这个配置相对来说没那么常用，但也不妨碍我们进步！！！！</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@Bean</span></span>
<span class="line"><span class="token class-name">WebSecurityCustomizer</span> <span class="token function">webSecurityCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">return</span> <span class="token punctuation">(</span>web<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> web<span class="token punctuation">.</span><span class="token function">ignoring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">requestMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/js/**&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/css/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过注册 <code>InMemoryUserDetailsManager bean </code>来重构身份验证凭据逻辑:</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@Bean</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">UserDetailsService</span> userDetailsService <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Define user information in memory</span></span>
<span class="line">    <span class="token comment">// Administrator</span></span>
<span class="line">    <span class="token class-name">UserDetails</span> adminUser <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">withUsername</span><span class="token punctuation">(</span><span class="token string">&quot;八尺妖剑&quot;</span><span class="token punctuation">)</span> <span class="token comment">// Username</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">&quot;$2a$10$5GgerupMYdknnk.ln/9jK.MrQ39IcoO9vILlgPHigpAQ10PbLsoHS&quot;</span><span class="token punctuation">)</span> <span class="token comment">// Password, {noop} for no encryption</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span> <span class="token comment">// Assign roles</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">authorities</span><span class="token punctuation">(</span><span class="token string">&quot;ROLE_test:show&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;user:name&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;user:list&quot;</span><span class="token punctuation">)</span> </span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// Build normal user information</span></span>
<span class="line">    <span class="token class-name">UserDetails</span> users <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">withUsername</span><span class="token punctuation">(</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">)</span> <span class="token comment">// Username</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">&quot;$2a$10$5GgerupMYdknnk.ln/9jK.MrQ39IcoO9vILlgPHigpAQ10PbLsoHS&quot;</span><span class="token punctuation">)</span> <span class="token comment">// Password, {noop} for no encryption</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span> <span class="token comment">// Assign role</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// Store the constructed user information in SpringSecurity (in memory)</span></span>
<span class="line">    <span class="token class-name">InMemoryUserDetailsManager</span> userDetailsManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryUserDetailsManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    userDetailsManager<span class="token punctuation">.</span><span class="token function">createUser</span><span class="token punctuation">(</span>adminUser<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    userDetailsManager<span class="token punctuation">.</span><span class="token function">createUser</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> userDetailsManager<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>HTTP 安全配置,在旧版本中，我们一般通过重写 <code>WebSecurityConfigurer </code>类中的 <code>configure </code>方法来配置 <code>HttpSecurity</code>。由于它在最新版本中被删除，新版的配置方式是通过<code>SecurityFilterChain bean</code> 来进行。</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@Bean</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">SecurityFilterChain</span> <span class="token function">filterChain</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> httpSecurity<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Configure CSRF to be disabled</span></span>
<span class="line">    httpSecurity<span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token class-name">AbstractHttpConfigurer</span><span class="token operator">::</span><span class="token function">disable</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Configure request interception</span></span>
<span class="line">    httpSecurity<span class="token punctuation">.</span><span class="token function">authorizeHttpRequests</span><span class="token punctuation">(</span>auth <span class="token operator">-&gt;</span></span>
<span class="line">                    auth<span class="token punctuation">.</span><span class="token function">requestMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/to_login&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Specify login method: form, BASIC, etc.</span></span>
<span class="line">    httpSecurity<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span>form <span class="token operator">-&gt;</span> form<span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token string">&quot;/to_login&quot;</span><span class="token punctuation">)</span> <span class="token comment">// Redirect to custom login page</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">loginProcessingUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/doLogin&quot;</span><span class="token punctuation">)</span> <span class="token comment">// Handle frontend requests, path matches frontend request path</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">usernameParameter</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">passwordParameter</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">defaultSuccessUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/index&quot;</span><span class="token punctuation">)</span> <span class="token comment">// Default page to redirect to after successful login</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> httpSecurity<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当然，密码编码器的写法也可以通过注册<code>Bean</code>得方式来完成:</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@Bean</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">PasswordEncoder</span> <span class="token function">passwordEncoderParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Build the password encoder</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29),c=[p];function o(i,l){return a(),s("div",null,c)}const r=n(t,[["render",o],["__file","Spring Security5.x到Spring Security6.x的迁移.html.vue"]]),d=JSON.parse('{"path":"/posts/Spring%20Security5.x%E5%88%B0Spring%20Security6.x%E7%9A%84%E8%BF%81%E7%A7%BB.html","title":"Spring Security5.x到Spring Security6.x的迁移","lang":"en-US","frontmatter":{"date":"2024-06-13T00:00:00.000Z","category":["SpringSecurity"],"tag":["SpringBoot","java","SpringSecurity"],"excerpt":"<p style=\\"color:gray;\\">之前有写过一篇关于Spring Security的文章，但那已经是相对比较旧的版本了，就目前Spring Security6.0来说，这其中出现了不少的变动和更新，很多`API`的使用也是有不小的变化，所以我觉得有必要学习一下。但这篇文章的重点放在SpringSecurity6.x的新变动了解以及SpringSecurity5.x版本的迁移上。</p>"},"headers":[{"level":2,"title":"1. 啰里吧嗦","slug":"_1-啰里吧嗦","link":"#_1-啰里吧嗦","children":[]},{"level":2,"title":"2. 阅读前提","slug":"_2-阅读前提","link":"#_2-阅读前提","children":[{"level":3,"title":"2.1 Spring Boot和Spring Security的版本关系","slug":"_2-1-spring-boot和spring-security的版本关系","link":"#_2-1-spring-boot和spring-security的版本关系","children":[]},{"level":3,"title":"2.2 Spring Security 6 新的变动","slug":"_2-2-spring-security-6-新的变动","link":"#_2-2-spring-security-6-新的变动","children":[]}]},{"level":2,"title":"3. 版本升级","slug":"_3-版本升级","link":"#_3-版本升级","children":[]}],"git":{"updatedTime":1718336313000,"contributors":[{"name":"八尺","email":"ilikexff@gmail.com","commits":1}]},"filePathRelative":"posts/Spring Security5.x到Spring Security6.x的迁移.md"}');export{r as comp,d as data};
