import{_ as n,c as s,o as a,a as e}from"./app-CVgY-oE7.js";const p={},t=e(`<h1 id="关于rust中的move语义" tabindex="-1"><a class="header-anchor" href="#关于rust中的move语义"><span>关于Rust中的move语义</span></a></h1><p>在Rust中，&quot;move 语义&quot; 涉及将所有权（ownership）从一个变量转移到另一个变量的概念。当将一个值赋给另一个变量时，默认情况下会发生移动操作，这意味着原始变量不再拥有该值，而新变量成为该值的所有者。这种操作可以防止数据竞争和内存安全问题，并在编译时捕获潜在的错误。Move 语义是 Rust 的核心概念之一，有助于确保代码的安全性和并发性，因此，非常有必要单独拎出来强化强化。</p><hr><h2 id="_1-默认移动" tabindex="-1"><a class="header-anchor" href="#_1-默认移动"><span>1. 默认移动</span></a></h2><p>默认移动意味着在<code>Rust</code>中，当你将一个值分配给另一个新变量或者说作为参数传递到函数中时这个过程使用的是<code>move</code>而非<code>clone</code>.这代表者该值的所有权也会随之被转移到新的变量中。</p><p>考虑下面的代码：</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Hi</span> <span class="token punctuation">{</span></span>
<span class="line">    message<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token keyword">mut</span> h1 <span class="token operator">=</span> <span class="token class-name">Hi</span> <span class="token punctuation">{</span></span>
<span class="line">        message<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Hello!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> h2 <span class="token operator">=</span> h1<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;h1:{}&quot;</span><span class="token punctuation">,</span> h1<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;h2:{}&quot;</span><span class="token punctuation">,</span> h2<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://images.waer.ltd/notes/image-20240529110455074.png" alt="image-20240529110455074"></p><p>上面的代码中，我们创建了一个结构体，在第一步（箭头）中，执行了<code>h2=h1</code>时，此时<code>h1</code>的所有权就已经被移动到了<code>h2</code>中，<code>h1</code>随之失效，当我们再次使用<code>h1</code>时会编译失败。</p><p><img src="https://images.waer.ltd/notes/image-20240529110802394.png" alt="image-20240529110802394"></p><blockquote><p>这些操作都是<code>Rust</code>中默认的。</p></blockquote><hr><h2 id="_2-作为函数参数时" tabindex="-1"><a class="header-anchor" href="#_2-作为函数参数时"><span>2. 作为函数参数时</span></a></h2><p>当我们将 <code>struct </code>实例作为参数传递给函数时，该 <code>struct </code>被移动到函数中。这意味着传递的原始变量不再有效，不能再次使用。</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">say</span><span class="token punctuation">(</span>user<span class="token punctuation">:</span> <span class="token class-name">User</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Hi,{}&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">        name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;马超&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">say</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;user:{:?}&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们定义了一个<code>User</code>结构体，并创建了一个函数<code>say</code>，它的参数就是这个结构体。函数功能很简单，就是打印结构体中字段的内容。</p><p>在主函数中，构建了<code>User</code>结构体之后将它传递给函数使用。这之后，我们尝试打印这个结构体，但是编译无法通过，这是因为我们的结构体的所有权已经转移到了函数中，不能被再次使用。</p><p>那么，如果我们还是需要继续这个结构体怎么办呢？可以通过使用引用传递参数的方式，或者说使用<code>clone</code>，这样可以避免所有权的转移。</p><ul><li>传递引用</li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="line"><span class="token attribute attr-name">#[derive(Debug)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">say</span><span class="token punctuation">(</span>user<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">User</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Hi,{}&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">        name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;马超&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">say</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;user:{:?}&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>clone</li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="line"><span class="token attribute attr-name">#[derive(Debug, Clone)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">say</span><span class="token punctuation">(</span>user<span class="token punctuation">:</span> <span class="token class-name">User</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Hi,{}&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">        name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;马超&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">say</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;user:{:?}&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_3-返回中的转移" tabindex="-1"><a class="header-anchor" href="#_3-返回中的转移"><span>3. 返回中的转移</span></a></h2><p>在Rust中，当一个函数返回一个结构体时，结构体的所有权会从函数的作用域转移到调用作用域。这意味着结构体从函数的作用域移动到调用作用域。以下是一个示例来演示这种行为：</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="line"><span class="token attribute attr-name">#[derive(Debug)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">MyStruct</span> <span class="token punctuation">{</span></span>
<span class="line">    data<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">create_struct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">MyStruct</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">MyStruct</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> my_struct <span class="token operator">=</span> <span class="token function">create_struct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> my_struct<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这行代码可以正常工作</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 下面这行代码会导致编译错误，因为my_struct已经被移动</span></span>
<span class="line">    <span class="token comment">// println!(&quot;{:?}&quot;, my_struct);</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，<code>create_struct</code>函数创建一个<code>MyStruct</code>实例并返回它。当在<code>main</code>函数中将<code>my_struct</code>赋值为<code>create_struct</code>的返回值时，结构体的所有权转移到了<code>my_struct</code>。因此，你可以打印<code>my_struct</code>一次，但如果在结构体已经被移动后尝试再次使用<code>my_struct</code>，将会导致编译错误。</p><p>如果您需要在函数调用后继续使用结构体，可以返回结构体的引用而不是结构体本身。这样，所有权不会被转移，原始结构体仍然有效。</p><hr><h2 id="_4-move关键字" tabindex="-1"><a class="header-anchor" href="#_4-move关键字"><span>4. Move关键字</span></a></h2><p><code>move</code>关键字会显式的触发所有权的强制转移。注意，这里说的是转移、而不是复制。</p><p>举个<code>move</code>在闭包中使用的栗子：</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">do_sth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token keyword">mut</span> x <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token keyword">mut</span> y <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> closure <span class="token operator">=</span> <span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{} {}&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">closure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// println!(&quot;x :{}&quot;, x);</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">do_sth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><ol><li><strong>定义 <code>do_sth</code> 函数</strong>： <ul><li>函数 <code>do_sth</code> 定义了两个可变字符串变量 <code>x</code> 和 <code>y</code>，分别初始化为 <code>&quot;Hello&quot;</code> 和 <code>&quot;World&quot;</code>。</li></ul></li><li><strong>创建并立即执行带 <code>move</code> 的闭包</strong>： <ul><li>在 <code>do_sth</code> 函数内部，定义了一个匿名闭包（通过 <code>|| { ... }</code> 形式）并赋值给了变量 <code>closure</code>。</li><li>闭包前面的 <code>move</code> 关键字是重点。它指示闭包在其被调用时，会“移动”捕获的变量（在这里是 <code>x</code> 和 <code>y</code>）的所有权进入闭包内部，而不是仅仅借用它们。这意味着一旦闭包执行完毕，原始变量 <code>x</code> 和 <code>y</code> 将不再可用，因为它们的所有权已经被转移给了闭包。</li><li>闭包体内的代码是打印 <code>x</code> 和 <code>y</code> 的内容。</li></ul></li><li><strong>调用闭包</strong>： <ul><li>通过 <code>closure();</code> 来执行这个闭包，输出结果为 <code>&quot;Hello World&quot;</code>。</li></ul></li><li><strong>注释掉的 println!</strong>： <ul><li>之后有一行被注释掉的代码 <code>// println!(&quot;x :{}&quot;, x);</code>。由于闭包使用了 <code>move</code>，变量 <code>x</code> 和 <code>y</code> 的所有权已经被转移给闭包，所以在闭包执行后，尝试访问 <code>x</code> 会引发编译错误，因为 <code>x</code> 已不再有效。</li></ul></li><li><strong>在 <code>main</code> 函数中调用 <code>do_sth</code></strong>： <ul><li><code>main</code> 函数简单调用了 <code>do_sth()</code>，执行上述过程。最终程序输出 <code>&quot;Hello World&quot;</code>，且不会尝试访问已被移动的变量。</li></ul></li></ol></blockquote><hr><h2 id="_5-copy-trait" tabindex="-1"><a class="header-anchor" href="#_5-copy-trait"><span>5. Copy trait</span></a></h2><p>在<code>Rust</code>中，某些类型是默认实现了<code>Copy trait</code>的，这意味着他们的值在被移动是发生的是复制，源值将保留不变。这些类型包括了诸如整数、浮点、布尔、字符等基本数据类型；</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> y <span class="token operator">=</span> x<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;x is {}&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码中，虽然我们执行了<code>y=x</code>的赋值操作，但由于基本类型实现了<code>Copy trait</code>,所以源值<code>x</code>还是3；</p><p>与之对比的是没有实现<code>Copy trait</code> 的<code>String</code>类型；</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> y <span class="token operator">=</span> x<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;x is {}&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://images.waer.ltd/notes/image-20240529164255374.png" alt="image-20240529164255374"></p><blockquote><p>在这里， 操作<code>y = x</code> 执行后 <code>x</code>被移动 。 <code>x</code> 移动后不再有效。并且编译报错信息也给出了提示，该类型没有实现<code>Copy trait</code>;</p></blockquote><p>注意，任何完全由复制类型组成的类型也是具有<code>Copy</code>属性的。 例如：</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="line"><span class="token attribute attr-name">#[derive(Debug, Copy, Clone)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Point</span> <span class="token punctuation">{</span></span>
<span class="line">    x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span></span>
<span class="line">    y<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> origin <span class="token operator">=</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> point <span class="token operator">=</span> origin<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;origin is {:?}&quot;</span><span class="token punctuation">,</span> origin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>上述例子中，由于结构体中的字段都是<code>i32</code>的整型，而整型默认实现了<code>Copy trait</code>，此时这个结构体也默认拥有了该特性，当我们执行了<code>let point = origin;</code>之后打印<code>origin</code>的值依旧是原来的结构体，说明它执行了复制操作。</p></blockquote><hr><h2 id="_6-小结" tabindex="-1"><a class="header-anchor" href="#_6-小结"><span>6. 小结</span></a></h2><p><code>Rust</code>中采取移动的一些优势：</p><ul><li>性能：移动不需要值得副本，因此速度很快。</li><li>内存：如果不移动，则每当传递或者重新分配值时，就需要更多得内存分配；</li><li>唯一性：移动可以强制保持所有权得惟一，确定在给定时间只有一个变量拥有该值，也为内存安全提供了保证；</li></ul>`,50),c=[t];function l(o,i){return a(),s("div",null,c)}const d=n(p,[["render",l],["__file","rust中的移动语义.html.vue"]]),r=JSON.parse('{"path":"/posts/rust%E4%B8%AD%E7%9A%84%E7%A7%BB%E5%8A%A8%E8%AF%AD%E4%B9%89.html","title":"关于Rust中的move语义","lang":"en-US","frontmatter":{"date":"2024-06-09T00:00:00.000Z","category":["Rust基础"],"tag":["Rust","move"],"excerpt":"<p style=\\"color:gray;\\">在Rust中，\\"move 语义\\" 涉及将所有权（ownership）从一个变量转移到另一个变量的概念。当将一个值赋给另一个变量时，默认情况下会发生移动操作，这意味着原始变量不再拥有该值，而新变量成为该值的所有者。这种操作可以防止数据竞争和内存安全问题，并在编译时捕获潜在的错误。Move 语义是 Rust 的核心概念之一，有助于确保代码的安全性和并发性，因此，非常有必要单独拎出来强化强化。</p>"},"headers":[{"level":2,"title":"1. 默认移动","slug":"_1-默认移动","link":"#_1-默认移动","children":[]},{"level":2,"title":"2. 作为函数参数时","slug":"_2-作为函数参数时","link":"#_2-作为函数参数时","children":[]},{"level":2,"title":"3. 返回中的转移","slug":"_3-返回中的转移","link":"#_3-返回中的转移","children":[]},{"level":2,"title":"4. Move关键字","slug":"_4-move关键字","link":"#_4-move关键字","children":[]},{"level":2,"title":"5. Copy trait","slug":"_5-copy-trait","link":"#_5-copy-trait","children":[]},{"level":2,"title":"6. 小结","slug":"_6-小结","link":"#_6-小结","children":[]}],"git":{"updatedTime":1718336313000,"contributors":[{"name":"八尺","email":"ilikexff@gmail.com","commits":1}]},"filePathRelative":"posts/rust中的移动语义.md"}');export{d as comp,r as data};
